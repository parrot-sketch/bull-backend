import { PrismaService } from '../prisma.service';
export declare class UserRepository {
    private prisma;
    constructor(prisma: PrismaService);
    get user(): import(".prisma/client").Prisma.UserDelegate<import("@prisma/client/runtime/library").DefaultArgs>;
    get userSession(): import(".prisma/client").Prisma.UserSessionDelegate<import("@prisma/client/runtime/library").DefaultArgs>;
    get mfaSettings(): import(".prisma/client").Prisma.MfaSettingsDelegate<import("@prisma/client/runtime/library").DefaultArgs>;
    get auditLog(): import(".prisma/client").Prisma.AuditLogDelegate<import("@prisma/client/runtime/library").DefaultArgs>;
    get consentRecord(): import(".prisma/client").Prisma.ConsentRecordDelegate<import("@prisma/client/runtime/library").DefaultArgs>;
    findByEmail(email: string): Promise<{
        role: import(".prisma/client").$Enums.UserRole;
        id: string;
        email: string;
        password: string;
        firstName: string;
        lastName: string;
        isActive: boolean;
        isVerified: boolean;
        isLocked: boolean;
        lockedUntil: Date | null;
        avatar: string | null;
        phoneNumber: string | null;
        dateOfBirth: Date | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        address: string | null;
        city: string | null;
        state: string | null;
        zipCode: string | null;
        country: string;
        department: string | null;
        specialization: string | null;
        licenseNumber: string | null;
        npiNumber: string | null;
        lastLoginAt: Date | null;
        lastPasswordChange: Date;
        passwordResetToken: string | null;
        passwordResetExpires: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    findById(id: string): Promise<{
        role: import(".prisma/client").$Enums.UserRole;
        id: string;
        email: string;
        password: string;
        firstName: string;
        lastName: string;
        isActive: boolean;
        isVerified: boolean;
        isLocked: boolean;
        lockedUntil: Date | null;
        avatar: string | null;
        phoneNumber: string | null;
        dateOfBirth: Date | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        address: string | null;
        city: string | null;
        state: string | null;
        zipCode: string | null;
        country: string;
        department: string | null;
        specialization: string | null;
        licenseNumber: string | null;
        npiNumber: string | null;
        lastLoginAt: Date | null;
        lastPasswordChange: Date;
        passwordResetToken: string | null;
        passwordResetExpires: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    createSession(userId: string, refreshToken: string, expiresAt: Date, opts?: {
        deviceInfo?: any;
        ipAddress?: string;
        userAgent?: string;
    }): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        ipAddress: string | null;
        userAgent: string | null;
        location: string | null;
        refreshToken: string;
        accessToken: string | null;
        deviceInfo: import("@prisma/client/runtime/library").JsonValue | null;
        expiresAt: Date;
        lastActivity: Date;
        isSecure: boolean;
    }>;
    deleteSessionByRefreshToken(refreshToken: string): Promise<import(".prisma/client").Prisma.BatchPayload>;
    invalidateSessions(userId: string): Promise<import(".prisma/client").Prisma.BatchPayload>;
    createUser(data: any): Promise<{
        role: import(".prisma/client").$Enums.UserRole;
        id: string;
        email: string;
        password: string;
        firstName: string;
        lastName: string;
        isActive: boolean;
        isVerified: boolean;
        isLocked: boolean;
        lockedUntil: Date | null;
        avatar: string | null;
        phoneNumber: string | null;
        dateOfBirth: Date | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        address: string | null;
        city: string | null;
        state: string | null;
        zipCode: string | null;
        country: string;
        department: string | null;
        specialization: string | null;
        licenseNumber: string | null;
        npiNumber: string | null;
        lastLoginAt: Date | null;
        lastPasswordChange: Date;
        passwordResetToken: string | null;
        passwordResetExpires: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateUser(id: string, data: any): Promise<{
        role: import(".prisma/client").$Enums.UserRole;
        id: string;
        email: string;
        password: string;
        firstName: string;
        lastName: string;
        isActive: boolean;
        isVerified: boolean;
        isLocked: boolean;
        lockedUntil: Date | null;
        avatar: string | null;
        phoneNumber: string | null;
        dateOfBirth: Date | null;
        gender: import(".prisma/client").$Enums.Gender | null;
        address: string | null;
        city: string | null;
        state: string | null;
        zipCode: string | null;
        country: string;
        department: string | null;
        specialization: string | null;
        licenseNumber: string | null;
        npiNumber: string | null;
        lastLoginAt: Date | null;
        lastPasswordChange: Date;
        passwordResetToken: string | null;
        passwordResetExpires: Date | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    logAudit(userId: string | null, action: string, details: any): Promise<{
        id: string;
        userId: string | null;
        action: string;
        resource: string | null;
        resourceId: string | null;
        ipAddress: string | null;
        userAgent: string | null;
        method: string | null;
        endpoint: string | null;
        metadata: import("@prisma/client/runtime/library").JsonValue | null;
        severity: import(".prisma/client").$Enums.AuditSeverity;
        timestamp: Date;
    }>;
}
