import { PrismaService } from '../prisma.service';
export declare class DoctorProfileRepository {
    private prisma;
    constructor(prisma: PrismaService);
    get doctorProfile(): import(".prisma/client").Prisma.DoctorProfileDelegate<import("@prisma/client/runtime/library").DefaultArgs>;
    get doctorService(): import(".prisma/client").Prisma.DoctorServiceDelegate<import("@prisma/client/runtime/library").DefaultArgs>;
    get doctorInsurance(): import(".prisma/client").Prisma.DoctorInsuranceDelegate<import("@prisma/client/runtime/library").DefaultArgs>;
    get consultationFee(): import(".prisma/client").Prisma.ConsultationFeeDelegate<import("@prisma/client/runtime/library").DefaultArgs>;
    get doctorSchedule(): import(".prisma/client").Prisma.DoctorScheduleDelegate<import("@prisma/client/runtime/library").DefaultArgs>;
    get doctorAvailability(): import(".prisma/client").Prisma.DoctorAvailabilityDelegate<import("@prisma/client/runtime/library").DefaultArgs>;
    findByDoctorId(doctorId: string): Promise<{
        id: string;
        npiNumber: string | null;
        createdAt: Date;
        updatedAt: Date;
        doctorId: string;
        title: string | null;
        credentials: string[];
        specialties: string[];
        subSpecialties: string[];
        yearsExperience: number | null;
        practiceName: string | null;
        practiceType: import(".prisma/client").$Enums.PracticeType;
        practiceAddress: string | null;
        practiceCity: string | null;
        practiceState: string | null;
        practiceZipCode: string | null;
        practicePhone: string | null;
        practiceEmail: string | null;
        practiceWebsite: string | null;
        medicalLicenseNumber: string | null;
        medicalLicenseState: string | null;
        medicalLicenseExpiry: Date | null;
        deaNumber: string | null;
        boardCertifications: string[];
        professionalBio: string | null;
        education: string | null;
        awards: string[];
        publications: string[];
        languages: string[];
        isAcceptingNewPatients: boolean;
        consultationTypes: import(".prisma/client").$Enums.ConsultationType[];
        currency: string;
    }>;
    createProfile(data: any): Promise<{
        id: string;
        npiNumber: string | null;
        createdAt: Date;
        updatedAt: Date;
        doctorId: string;
        title: string | null;
        credentials: string[];
        specialties: string[];
        subSpecialties: string[];
        yearsExperience: number | null;
        practiceName: string | null;
        practiceType: import(".prisma/client").$Enums.PracticeType;
        practiceAddress: string | null;
        practiceCity: string | null;
        practiceState: string | null;
        practiceZipCode: string | null;
        practicePhone: string | null;
        practiceEmail: string | null;
        practiceWebsite: string | null;
        medicalLicenseNumber: string | null;
        medicalLicenseState: string | null;
        medicalLicenseExpiry: Date | null;
        deaNumber: string | null;
        boardCertifications: string[];
        professionalBio: string | null;
        education: string | null;
        awards: string[];
        publications: string[];
        languages: string[];
        isAcceptingNewPatients: boolean;
        consultationTypes: import(".prisma/client").$Enums.ConsultationType[];
        currency: string;
    }>;
    updateProfile(id: string, data: any): Promise<{
        id: string;
        npiNumber: string | null;
        createdAt: Date;
        updatedAt: Date;
        doctorId: string;
        title: string | null;
        credentials: string[];
        specialties: string[];
        subSpecialties: string[];
        yearsExperience: number | null;
        practiceName: string | null;
        practiceType: import(".prisma/client").$Enums.PracticeType;
        practiceAddress: string | null;
        practiceCity: string | null;
        practiceState: string | null;
        practiceZipCode: string | null;
        practicePhone: string | null;
        practiceEmail: string | null;
        practiceWebsite: string | null;
        medicalLicenseNumber: string | null;
        medicalLicenseState: string | null;
        medicalLicenseExpiry: Date | null;
        deaNumber: string | null;
        boardCertifications: string[];
        professionalBio: string | null;
        education: string | null;
        awards: string[];
        publications: string[];
        languages: string[];
        isAcceptingNewPatients: boolean;
        consultationTypes: import(".prisma/client").$Enums.ConsultationType[];
        currency: string;
    }>;
    findServicesByDoctor(doctorId: string): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        doctorId: string;
        profileId: string;
        description: string | null;
        category: import(".prisma/client").$Enums.ServiceCategory;
        duration: number;
        price: import("@prisma/client/runtime/library").Decimal | null;
        isVirtual: boolean;
        isInPerson: boolean;
    }[]>;
    findAvailability(doctorId: string, date: Date): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        doctorId: string;
        date: Date;
        startTime: string;
        endTime: string;
        isAvailable: boolean;
        reason: string | null;
    }[]>;
}
