import { PrismaService } from '../prisma.service';
import { CreateDoctorProfileDto, CreateDoctorServiceDto, CreateDoctorInsuranceDto } from '../types';
export declare class DoctorProfileRepository {
    private readonly prisma;
    constructor(prisma: PrismaService);
    private get doctorProfile();
    private get doctorService();
    private get doctorInsurance();
    private get consultationFee();
    createProfile(doctorId: string, data: CreateDoctorProfileDto): Promise<{
        consultationFees: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            profileId: string;
            consultationType: import(".prisma/client").$Enums.ConsultationType;
            baseFee: import("@prisma/client/runtime/library").Decimal;
            followUpFee: import("@prisma/client/runtime/library").Decimal | null;
            cancellationFee: import("@prisma/client/runtime/library").Decimal | null;
            noShowFee: import("@prisma/client/runtime/library").Decimal | null;
        }[];
        services: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            doctorId: string;
            profileId: string;
            description: string | null;
            category: import(".prisma/client").$Enums.ServiceCategory;
            duration: number;
            price: import("@prisma/client/runtime/library").Decimal | null;
            isVirtual: boolean;
            isInPerson: boolean;
        }[];
        insurances: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            profileId: string;
            insuranceName: string;
            insuranceType: import(".prisma/client").$Enums.InsuranceType;
            planName: string | null;
            copayAmount: import("@prisma/client/runtime/library").Decimal | null;
            deductibleAmount: import("@prisma/client/runtime/library").Decimal | null;
        }[];
    } & {
        id: string;
        npiNumber: string | null;
        createdAt: Date;
        updatedAt: Date;
        doctorId: string;
        specialties: string[];
        education: string | null;
        title: string | null;
        credentials: string[];
        subSpecialties: string[];
        yearsExperience: number | null;
        practiceName: string | null;
        practiceType: import(".prisma/client").$Enums.PracticeType;
        practiceAddress: string | null;
        practiceCity: string | null;
        practiceState: string | null;
        practiceZipCode: string | null;
        practicePhone: string | null;
        practiceEmail: string | null;
        practiceWebsite: string | null;
        medicalLicenseNumber: string | null;
        medicalLicenseState: string | null;
        medicalLicenseExpiry: Date | null;
        deaNumber: string | null;
        boardCertifications: string[];
        professionalBio: string | null;
        awards: string[];
        publications: string[];
        languages: string[];
        isAcceptingNewPatients: boolean;
        consultationTypes: import(".prisma/client").$Enums.ConsultationType[];
        currency: string;
    }>;
    findProfileById(doctorId: string): Promise<{
        consultationFees: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            profileId: string;
            consultationType: import(".prisma/client").$Enums.ConsultationType;
            baseFee: import("@prisma/client/runtime/library").Decimal;
            followUpFee: import("@prisma/client/runtime/library").Decimal | null;
            cancellationFee: import("@prisma/client/runtime/library").Decimal | null;
            noShowFee: import("@prisma/client/runtime/library").Decimal | null;
        }[];
        services: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            doctorId: string;
            profileId: string;
            description: string | null;
            category: import(".prisma/client").$Enums.ServiceCategory;
            duration: number;
            price: import("@prisma/client/runtime/library").Decimal | null;
            isVirtual: boolean;
            isInPerson: boolean;
        }[];
        insurances: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            profileId: string;
            insuranceName: string;
            insuranceType: import(".prisma/client").$Enums.InsuranceType;
            planName: string | null;
            copayAmount: import("@prisma/client/runtime/library").Decimal | null;
            deductibleAmount: import("@prisma/client/runtime/library").Decimal | null;
        }[];
        schedules: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            date: Date | null;
            serviceType: string | null;
            notes: string | null;
            profileId: string;
            templateId: string | null;
            dayOfWeek: import(".prisma/client").$Enums.DayOfWeek;
            startTime: string;
            endTime: string;
            isAvailable: boolean;
            slotDuration: number;
            bufferTime: number;
            maxBookings: number;
            location: string | null;
            breakStartTime: string | null;
            breakEndTime: string | null;
            isRecurring: boolean;
            effectiveFrom: Date;
            effectiveUntil: Date | null;
        }[];
    } & {
        id: string;
        npiNumber: string | null;
        createdAt: Date;
        updatedAt: Date;
        doctorId: string;
        specialties: string[];
        education: string | null;
        title: string | null;
        credentials: string[];
        subSpecialties: string[];
        yearsExperience: number | null;
        practiceName: string | null;
        practiceType: import(".prisma/client").$Enums.PracticeType;
        practiceAddress: string | null;
        practiceCity: string | null;
        practiceState: string | null;
        practiceZipCode: string | null;
        practicePhone: string | null;
        practiceEmail: string | null;
        practiceWebsite: string | null;
        medicalLicenseNumber: string | null;
        medicalLicenseState: string | null;
        medicalLicenseExpiry: Date | null;
        deaNumber: string | null;
        boardCertifications: string[];
        professionalBio: string | null;
        awards: string[];
        publications: string[];
        languages: string[];
        isAcceptingNewPatients: boolean;
        consultationTypes: import(".prisma/client").$Enums.ConsultationType[];
        currency: string;
    }>;
    updateProfile(doctorId: string, data: Partial<CreateDoctorProfileDto>): Promise<{
        services: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            doctorId: string;
            profileId: string;
            description: string | null;
            category: import(".prisma/client").$Enums.ServiceCategory;
            duration: number;
            price: import("@prisma/client/runtime/library").Decimal | null;
            isVirtual: boolean;
            isInPerson: boolean;
        }[];
        insurances: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            profileId: string;
            insuranceName: string;
            insuranceType: import(".prisma/client").$Enums.InsuranceType;
            planName: string | null;
            copayAmount: import("@prisma/client/runtime/library").Decimal | null;
            deductibleAmount: import("@prisma/client/runtime/library").Decimal | null;
        }[];
        schedules: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            date: Date | null;
            serviceType: string | null;
            notes: string | null;
            profileId: string;
            templateId: string | null;
            dayOfWeek: import(".prisma/client").$Enums.DayOfWeek;
            startTime: string;
            endTime: string;
            isAvailable: boolean;
            slotDuration: number;
            bufferTime: number;
            maxBookings: number;
            location: string | null;
            breakStartTime: string | null;
            breakEndTime: string | null;
            isRecurring: boolean;
            effectiveFrom: Date;
            effectiveUntil: Date | null;
        }[];
    } & {
        id: string;
        npiNumber: string | null;
        createdAt: Date;
        updatedAt: Date;
        doctorId: string;
        specialties: string[];
        education: string | null;
        title: string | null;
        credentials: string[];
        subSpecialties: string[];
        yearsExperience: number | null;
        practiceName: string | null;
        practiceType: import(".prisma/client").$Enums.PracticeType;
        practiceAddress: string | null;
        practiceCity: string | null;
        practiceState: string | null;
        practiceZipCode: string | null;
        practicePhone: string | null;
        practiceEmail: string | null;
        practiceWebsite: string | null;
        medicalLicenseNumber: string | null;
        medicalLicenseState: string | null;
        medicalLicenseExpiry: Date | null;
        deaNumber: string | null;
        boardCertifications: string[];
        professionalBio: string | null;
        awards: string[];
        publications: string[];
        languages: string[];
        isAcceptingNewPatients: boolean;
        consultationTypes: import(".prisma/client").$Enums.ConsultationType[];
        currency: string;
    }>;
    updateServices(doctorId: string, services: CreateDoctorServiceDto[]): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        doctorId: string;
        profileId: string;
        description: string | null;
        category: import(".prisma/client").$Enums.ServiceCategory;
        duration: number;
        price: import("@prisma/client/runtime/library").Decimal | null;
        isVirtual: boolean;
        isInPerson: boolean;
    }[]>;
    removeService(serviceId: string): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        doctorId: string;
        profileId: string;
        description: string | null;
        category: import(".prisma/client").$Enums.ServiceCategory;
        duration: number;
        price: import("@prisma/client/runtime/library").Decimal | null;
        isVirtual: boolean;
        isInPerson: boolean;
    }>;
    updateInsurance(doctorId: string, providers: CreateDoctorInsuranceDto[]): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        doctorId: string;
        profileId: string;
        insuranceName: string;
        insuranceType: import(".prisma/client").$Enums.InsuranceType;
        planName: string | null;
        copayAmount: import("@prisma/client/runtime/library").Decimal | null;
        deductibleAmount: import("@prisma/client/runtime/library").Decimal | null;
    }[]>;
    removeInsurance(id: string): Promise<{
        id: string;
        isActive: boolean;
        createdAt: Date;
        updatedAt: Date;
        doctorId: string;
        profileId: string;
        insuranceName: string;
        insuranceType: import(".prisma/client").$Enums.InsuranceType;
        planName: string | null;
        copayAmount: import("@prisma/client/runtime/library").Decimal | null;
        deductibleAmount: import("@prisma/client/runtime/library").Decimal | null;
    }>;
}
