import { PatientBookingService } from '../services/patient-booking.service';
export declare class PatientBookingController {
    private readonly patientBookingService;
    constructor(patientBookingService: PatientBookingService);
    findDoctors(specialty?: string, location?: string, city?: string, acceptingNewPatients?: boolean): Promise<{
        success: boolean;
        data: {
            id: any;
            name: string;
            email: any;
            phoneNumber: any;
            avatar: any;
            department: any;
            specialization: any;
            profile: {
                specialties: any;
                practiceName: any;
                practiceAddress: any;
                practiceCity: any;
                practiceState: any;
                practicePhone: any;
                isAcceptingNewPatients: any;
                services: any;
                insurances: any;
                consultationFees: any;
            };
        }[];
        message: string;
    }>;
    getDoctorDetails(doctorId: string): Promise<{
        success: boolean;
        data: {
            id: any;
            name: string;
            email: any;
            phoneNumber: any;
            avatar: any;
            department: any;
            specialization: any;
            profile: {
                specialties: any;
                practiceName: any;
                practiceAddress: any;
                practiceCity: any;
                practiceState: any;
                practicePhone: any;
                isAcceptingNewPatients: any;
                services: any;
                insurances: any;
                consultationFees: any;
            };
        };
        message: string;
    }>;
    getDoctorAvailability(doctorId: string, date: string): Promise<{
        success: boolean;
        data: {
            isAvailable: boolean;
            date: string;
            slots: any[];
            message: string;
            schedule?: undefined;
        };
        message: string;
    } | {
        success: boolean;
        data: {
            isAvailable: boolean;
            date: string;
            schedule: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                location: string | null;
                doctorId: string;
                profileId: string;
                templateId: string | null;
                dayOfWeek: import(".prisma/client").$Enums.DayOfWeek;
                startTime: string;
                endTime: string;
                isAvailable: boolean;
                date: Date | null;
                slotDuration: number;
                bufferTime: number;
                maxBookings: number;
                serviceType: string | null;
                notes: string | null;
                breakStartTime: string | null;
                breakEndTime: string | null;
                isRecurring: boolean;
                effectiveFrom: Date;
                effectiveUntil: Date | null;
            };
            slots: any[];
            message?: undefined;
        };
        message: string;
    }>;
    bookAppointment(req: any, bookingData: {
        doctorId: string;
        date: string;
        startTime: string;
        endTime: string;
        reasonForVisit?: string;
        symptoms?: string;
        type?: string;
    }): Promise<{
        success: boolean;
        data: {
            doctor: {
                doctorProfile: {
                    id: string;
                    npiNumber: string | null;
                    createdAt: Date;
                    updatedAt: Date;
                    doctorId: string;
                    title: string | null;
                    credentials: string[];
                    specialties: string[];
                    subSpecialties: string[];
                    yearsExperience: number | null;
                    practiceName: string | null;
                    practiceType: import(".prisma/client").$Enums.PracticeType;
                    practiceAddress: string | null;
                    practiceCity: string | null;
                    practiceState: string | null;
                    practiceZipCode: string | null;
                    practicePhone: string | null;
                    practiceEmail: string | null;
                    practiceWebsite: string | null;
                    medicalLicenseNumber: string | null;
                    medicalLicenseState: string | null;
                    medicalLicenseExpiry: Date | null;
                    deaNumber: string | null;
                    boardCertifications: string[];
                    professionalBio: string | null;
                    education: string | null;
                    awards: string[];
                    publications: string[];
                    languages: string[];
                    isAcceptingNewPatients: boolean;
                    consultationTypes: import(".prisma/client").$Enums.ConsultationType[];
                };
                id: string;
                email: string;
                firstName: string;
                lastName: string;
                phoneNumber: string;
            };
        } & {
            type: import(".prisma/client").$Enums.AppointmentType;
            status: import(".prisma/client").$Enums.AppointmentStatus;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            location: string | null;
            doctorId: string;
            startTime: string;
            endTime: string;
            serviceType: string | null;
            notes: string | null;
            isRecurring: boolean;
            patientId: string;
            scheduleId: string | null;
            appointmentDate: Date;
            duration: number;
            serviceId: string | null;
            symptoms: string | null;
            diagnosis: string | null;
            prescription: string | null;
            reasonForVisit: string | null;
            insuranceId: string | null;
            paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
            bookingRequestedAt: Date;
            confirmedAt: Date | null;
            cancelledAt: Date | null;
            cancelledBy: string | null;
            cancellationReason: string | null;
            requiresConfirmation: boolean;
            confirmationSent: boolean;
            followUpDate: Date | null;
            recurringPattern: string | null;
            parentAppointmentId: string | null;
        };
        message: string;
    }>;
    getPatientAppointments(req: any, status?: string, startDate?: string, endDate?: string): Promise<{
        success: boolean;
        data: ({
            doctor: {
                doctorProfile: {
                    specialties: string[];
                    practiceName: string;
                    practiceAddress: string;
                    practiceCity: string;
                    practicePhone: string;
                };
                id: string;
                email: string;
                firstName: string;
                lastName: string;
                phoneNumber: string;
                specialization: string;
            };
        } & {
            type: import(".prisma/client").$Enums.AppointmentType;
            status: import(".prisma/client").$Enums.AppointmentStatus;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            location: string | null;
            doctorId: string;
            startTime: string;
            endTime: string;
            serviceType: string | null;
            notes: string | null;
            isRecurring: boolean;
            patientId: string;
            scheduleId: string | null;
            appointmentDate: Date;
            duration: number;
            serviceId: string | null;
            symptoms: string | null;
            diagnosis: string | null;
            prescription: string | null;
            reasonForVisit: string | null;
            insuranceId: string | null;
            paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
            bookingRequestedAt: Date;
            confirmedAt: Date | null;
            cancelledAt: Date | null;
            cancelledBy: string | null;
            cancellationReason: string | null;
            requiresConfirmation: boolean;
            confirmationSent: boolean;
            followUpDate: Date | null;
            recurringPattern: string | null;
            parentAppointmentId: string | null;
        })[];
        message: string;
    }>;
    cancelAppointment(req: any, appointmentId: string, body?: {
        reason?: string;
    }): Promise<{
        success: boolean;
        data: {
            type: import(".prisma/client").$Enums.AppointmentType;
            status: import(".prisma/client").$Enums.AppointmentStatus;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            location: string | null;
            doctorId: string;
            startTime: string;
            endTime: string;
            serviceType: string | null;
            notes: string | null;
            isRecurring: boolean;
            patientId: string;
            scheduleId: string | null;
            appointmentDate: Date;
            duration: number;
            serviceId: string | null;
            symptoms: string | null;
            diagnosis: string | null;
            prescription: string | null;
            reasonForVisit: string | null;
            insuranceId: string | null;
            paymentStatus: import(".prisma/client").$Enums.PaymentStatus;
            bookingRequestedAt: Date;
            confirmedAt: Date | null;
            cancelledAt: Date | null;
            cancelledBy: string | null;
            cancellationReason: string | null;
            requiresConfirmation: boolean;
            confirmationSent: boolean;
            followUpDate: Date | null;
            recurringPattern: string | null;
            parentAppointmentId: string | null;
        };
        message: string;
    }>;
}
