import { DatabaseService } from '../../auth/services/database.service';
import { CreateConsultationFeeDto, CreateDoctorInsuranceDto, CreateDoctorProfileDto, CreateDoctorScheduleDto, CreateDoctorServiceDto, UpdateConsultationFeeDto, UpdateDoctorInsuranceDto, UpdateDoctorProfileDto, UpdateDoctorScheduleDto, UpdateDoctorServiceDto } from '../dto/doctor-profile.dto';
export declare class DoctorProfileService {
    private readonly db;
    constructor(db: DatabaseService);
    createProfile(doctorId: string, profileData: CreateDoctorProfileDto): Promise<{
        success: boolean;
        data: {
            consultationFees: {
                id: string;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                doctorId: string;
                profileId: string;
                consultationType: import(".prisma/client").$Enums.ConsultationType;
                baseFee: import("@prisma/client/runtime/library").Decimal;
                followUpFee: import("@prisma/client/runtime/library").Decimal | null;
                cancellationFee: import("@prisma/client/runtime/library").Decimal | null;
                noShowFee: import("@prisma/client/runtime/library").Decimal | null;
            }[];
            services: {
                id: string;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                name: string;
                doctorId: string;
                profileId: string;
                description: string | null;
                category: import(".prisma/client").$Enums.ServiceCategory;
                duration: number;
                price: import("@prisma/client/runtime/library").Decimal | null;
                isVirtual: boolean;
                isInPerson: boolean;
            }[];
            insurances: {
                id: string;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                doctorId: string;
                profileId: string;
                insuranceName: string;
                insuranceType: import(".prisma/client").$Enums.InsuranceType;
                planName: string | null;
                copayAmount: import("@prisma/client/runtime/library").Decimal | null;
                deductibleAmount: import("@prisma/client/runtime/library").Decimal | null;
            }[];
            schedules: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                doctorId: string;
                date: Date;
                serviceType: string | null;
                notes: string | null;
                profileId: string | null;
                startTime: string;
                endTime: string;
                isAvailable: boolean;
                templateId: string | null;
                slotDuration: number;
                bufferTime: number;
                timezone: string | null;
                maxBookings: number;
                currentBookings: number;
                location: string | null;
                meta: import("@prisma/client/runtime/library").JsonValue | null;
            }[];
        } & {
            id: string;
            npiNumber: string | null;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            title: string | null;
            credentials: string[];
            specialties: string[];
            subSpecialties: string[];
            yearsExperience: number | null;
            practiceName: string | null;
            practiceType: import(".prisma/client").$Enums.PracticeType;
            practiceAddress: string | null;
            practiceCity: string | null;
            practiceState: string | null;
            practiceZipCode: string | null;
            practicePhone: string | null;
            practiceEmail: string | null;
            practiceWebsite: string | null;
            medicalLicenseNumber: string | null;
            medicalLicenseState: string | null;
            medicalLicenseExpiry: Date | null;
            deaNumber: string | null;
            boardCertifications: string[];
            professionalBio: string | null;
            education: string | null;
            awards: string[];
            publications: string[];
            languages: string[];
            isAcceptingNewPatients: boolean;
            consultationTypes: import(".prisma/client").$Enums.ConsultationType[];
            currency: string;
        };
        message: string;
    }>;
    getProfile(doctorId: string): Promise<{
        success: boolean;
        data: {
            consultationFees: {
                id: string;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                doctorId: string;
                profileId: string;
                consultationType: import(".prisma/client").$Enums.ConsultationType;
                baseFee: import("@prisma/client/runtime/library").Decimal;
                followUpFee: import("@prisma/client/runtime/library").Decimal | null;
                cancellationFee: import("@prisma/client/runtime/library").Decimal | null;
                noShowFee: import("@prisma/client/runtime/library").Decimal | null;
            }[];
            doctor: {
                id: string;
                email: string;
                firstName: string;
                lastName: string;
                avatar: string;
                phoneNumber: string;
            };
            services: {
                id: string;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                name: string;
                doctorId: string;
                profileId: string;
                description: string | null;
                category: import(".prisma/client").$Enums.ServiceCategory;
                duration: number;
                price: import("@prisma/client/runtime/library").Decimal | null;
                isVirtual: boolean;
                isInPerson: boolean;
            }[];
            insurances: {
                id: string;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                doctorId: string;
                profileId: string;
                insuranceName: string;
                insuranceType: import(".prisma/client").$Enums.InsuranceType;
                planName: string | null;
                copayAmount: import("@prisma/client/runtime/library").Decimal | null;
                deductibleAmount: import("@prisma/client/runtime/library").Decimal | null;
            }[];
            schedules: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                doctorId: string;
                date: Date;
                serviceType: string | null;
                notes: string | null;
                profileId: string | null;
                startTime: string;
                endTime: string;
                isAvailable: boolean;
                templateId: string | null;
                slotDuration: number;
                bufferTime: number;
                timezone: string | null;
                maxBookings: number;
                currentBookings: number;
                location: string | null;
                meta: import("@prisma/client/runtime/library").JsonValue | null;
            }[];
        } & {
            id: string;
            npiNumber: string | null;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            title: string | null;
            credentials: string[];
            specialties: string[];
            subSpecialties: string[];
            yearsExperience: number | null;
            practiceName: string | null;
            practiceType: import(".prisma/client").$Enums.PracticeType;
            practiceAddress: string | null;
            practiceCity: string | null;
            practiceState: string | null;
            practiceZipCode: string | null;
            practicePhone: string | null;
            practiceEmail: string | null;
            practiceWebsite: string | null;
            medicalLicenseNumber: string | null;
            medicalLicenseState: string | null;
            medicalLicenseExpiry: Date | null;
            deaNumber: string | null;
            boardCertifications: string[];
            professionalBio: string | null;
            education: string | null;
            awards: string[];
            publications: string[];
            languages: string[];
            isAcceptingNewPatients: boolean;
            consultationTypes: import(".prisma/client").$Enums.ConsultationType[];
            currency: string;
        };
    }>;
    updateProfile(doctorId: string, updateData: UpdateDoctorProfileDto): Promise<{
        success: boolean;
        data: {
            consultationFees: {
                id: string;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                doctorId: string;
                profileId: string;
                consultationType: import(".prisma/client").$Enums.ConsultationType;
                baseFee: import("@prisma/client/runtime/library").Decimal;
                followUpFee: import("@prisma/client/runtime/library").Decimal | null;
                cancellationFee: import("@prisma/client/runtime/library").Decimal | null;
                noShowFee: import("@prisma/client/runtime/library").Decimal | null;
            }[];
            services: {
                id: string;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                name: string;
                doctorId: string;
                profileId: string;
                description: string | null;
                category: import(".prisma/client").$Enums.ServiceCategory;
                duration: number;
                price: import("@prisma/client/runtime/library").Decimal | null;
                isVirtual: boolean;
                isInPerson: boolean;
            }[];
            insurances: {
                id: string;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                doctorId: string;
                profileId: string;
                insuranceName: string;
                insuranceType: import(".prisma/client").$Enums.InsuranceType;
                planName: string | null;
                copayAmount: import("@prisma/client/runtime/library").Decimal | null;
                deductibleAmount: import("@prisma/client/runtime/library").Decimal | null;
            }[];
            schedules: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                doctorId: string;
                date: Date;
                serviceType: string | null;
                notes: string | null;
                profileId: string | null;
                startTime: string;
                endTime: string;
                isAvailable: boolean;
                templateId: string | null;
                slotDuration: number;
                bufferTime: number;
                timezone: string | null;
                maxBookings: number;
                currentBookings: number;
                location: string | null;
                meta: import("@prisma/client/runtime/library").JsonValue | null;
            }[];
        } & {
            id: string;
            npiNumber: string | null;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            title: string | null;
            credentials: string[];
            specialties: string[];
            subSpecialties: string[];
            yearsExperience: number | null;
            practiceName: string | null;
            practiceType: import(".prisma/client").$Enums.PracticeType;
            practiceAddress: string | null;
            practiceCity: string | null;
            practiceState: string | null;
            practiceZipCode: string | null;
            practicePhone: string | null;
            practiceEmail: string | null;
            practiceWebsite: string | null;
            medicalLicenseNumber: string | null;
            medicalLicenseState: string | null;
            medicalLicenseExpiry: Date | null;
            deaNumber: string | null;
            boardCertifications: string[];
            professionalBio: string | null;
            education: string | null;
            awards: string[];
            publications: string[];
            languages: string[];
            isAcceptingNewPatients: boolean;
            consultationTypes: import(".prisma/client").$Enums.ConsultationType[];
            currency: string;
        };
        message: string;
    }>;
    addService(doctorId: string, serviceData: CreateDoctorServiceDto): Promise<{
        success: boolean;
        data: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            doctorId: string;
            profileId: string;
            description: string | null;
            category: import(".prisma/client").$Enums.ServiceCategory;
            duration: number;
            price: import("@prisma/client/runtime/library").Decimal | null;
            isVirtual: boolean;
            isInPerson: boolean;
        };
        message: string;
    }>;
    updateService(serviceId: string, doctorId: string, updateData: UpdateDoctorServiceDto): Promise<{
        success: boolean;
        data: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            name: string;
            doctorId: string;
            profileId: string;
            description: string | null;
            category: import(".prisma/client").$Enums.ServiceCategory;
            duration: number;
            price: import("@prisma/client/runtime/library").Decimal | null;
            isVirtual: boolean;
            isInPerson: boolean;
        };
        message: string;
    }>;
    deleteService(serviceId: string, doctorId: string): Promise<{
        success: boolean;
        message: string;
    }>;
    addInsurance(doctorId: string, insuranceData: CreateDoctorInsuranceDto): Promise<{
        success: boolean;
        data: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            profileId: string;
            insuranceName: string;
            insuranceType: import(".prisma/client").$Enums.InsuranceType;
            planName: string | null;
            copayAmount: import("@prisma/client/runtime/library").Decimal | null;
            deductibleAmount: import("@prisma/client/runtime/library").Decimal | null;
        };
        message: string;
    }>;
    updateInsurance(insuranceId: string, doctorId: string, updateData: UpdateDoctorInsuranceDto): Promise<{
        success: boolean;
        data: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            profileId: string;
            insuranceName: string;
            insuranceType: import(".prisma/client").$Enums.InsuranceType;
            planName: string | null;
            copayAmount: import("@prisma/client/runtime/library").Decimal | null;
            deductibleAmount: import("@prisma/client/runtime/library").Decimal | null;
        };
        message: string;
    }>;
    deleteInsurance(insuranceId: string, doctorId: string): Promise<{
        success: boolean;
        message: string;
    }>;
    addConsultationFee(doctorId: string, feeData: CreateConsultationFeeDto): Promise<{
        success: boolean;
        data: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            profileId: string;
            consultationType: import(".prisma/client").$Enums.ConsultationType;
            baseFee: import("@prisma/client/runtime/library").Decimal;
            followUpFee: import("@prisma/client/runtime/library").Decimal | null;
            cancellationFee: import("@prisma/client/runtime/library").Decimal | null;
            noShowFee: import("@prisma/client/runtime/library").Decimal | null;
        };
        message: string;
    }>;
    updateConsultationFee(feeId: string, doctorId: string, updateData: UpdateConsultationFeeDto): Promise<{
        success: boolean;
        data: {
            id: string;
            isActive: boolean;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            profileId: string;
            consultationType: import(".prisma/client").$Enums.ConsultationType;
            baseFee: import("@prisma/client/runtime/library").Decimal;
            followUpFee: import("@prisma/client/runtime/library").Decimal | null;
            cancellationFee: import("@prisma/client/runtime/library").Decimal | null;
            noShowFee: import("@prisma/client/runtime/library").Decimal | null;
        };
        message: string;
    }>;
    addSchedule(doctorId: string, scheduleData: CreateDoctorScheduleDto): Promise<{
        success: boolean;
        data: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            date: Date;
            serviceType: string | null;
            notes: string | null;
            profileId: string | null;
            startTime: string;
            endTime: string;
            isAvailable: boolean;
            templateId: string | null;
            slotDuration: number;
            bufferTime: number;
            timezone: string | null;
            maxBookings: number;
            currentBookings: number;
            location: string | null;
            meta: import("@prisma/client/runtime/library").JsonValue | null;
        };
        message: string;
    }>;
    updateSchedule(scheduleId: string, doctorId: string, updateData: UpdateDoctorScheduleDto): Promise<{
        success: boolean;
        data: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            date: Date;
            serviceType: string | null;
            notes: string | null;
            profileId: string | null;
            startTime: string;
            endTime: string;
            isAvailable: boolean;
            templateId: string | null;
            slotDuration: number;
            bufferTime: number;
            timezone: string | null;
            maxBookings: number;
            currentBookings: number;
            location: string | null;
            meta: import("@prisma/client/runtime/library").JsonValue | null;
        };
        message: string;
    }>;
    deleteSchedule(scheduleId: string, doctorId: string): Promise<{
        success: boolean;
        message: string;
    }>;
    addAvailabilityOverride(doctorId: string, availabilityData: {
        date: Date;
        startTime: string;
        endTime: string;
        isAvailable: boolean;
        reason?: string;
    }): Promise<{
        success: boolean;
        data: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            date: Date;
            startTime: string;
            endTime: string;
            isAvailable: boolean;
            reason: string | null;
        };
        message: string;
    }>;
    getPublicProfile(doctorId: string): Promise<{
        success: boolean;
        data: {
            consultationFees: {
                id: string;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                doctorId: string;
                profileId: string;
                consultationType: import(".prisma/client").$Enums.ConsultationType;
                baseFee: import("@prisma/client/runtime/library").Decimal;
                followUpFee: import("@prisma/client/runtime/library").Decimal | null;
                cancellationFee: import("@prisma/client/runtime/library").Decimal | null;
                noShowFee: import("@prisma/client/runtime/library").Decimal | null;
            }[];
            doctor: {
                id: string;
                firstName: string;
                lastName: string;
                avatar: string;
            };
            services: {
                id: string;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                name: string;
                doctorId: string;
                profileId: string;
                description: string | null;
                category: import(".prisma/client").$Enums.ServiceCategory;
                duration: number;
                price: import("@prisma/client/runtime/library").Decimal | null;
                isVirtual: boolean;
                isInPerson: boolean;
            }[];
            insurances: {
                id: string;
                isActive: boolean;
                createdAt: Date;
                updatedAt: Date;
                doctorId: string;
                profileId: string;
                insuranceName: string;
                insuranceType: import(".prisma/client").$Enums.InsuranceType;
                planName: string | null;
                copayAmount: import("@prisma/client/runtime/library").Decimal | null;
                deductibleAmount: import("@prisma/client/runtime/library").Decimal | null;
            }[];
            schedules: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                doctorId: string;
                date: Date;
                serviceType: string | null;
                notes: string | null;
                profileId: string | null;
                startTime: string;
                endTime: string;
                isAvailable: boolean;
                templateId: string | null;
                slotDuration: number;
                bufferTime: number;
                timezone: string | null;
                maxBookings: number;
                currentBookings: number;
                location: string | null;
                meta: import("@prisma/client/runtime/library").JsonValue | null;
            }[];
        } & {
            id: string;
            npiNumber: string | null;
            createdAt: Date;
            updatedAt: Date;
            doctorId: string;
            title: string | null;
            credentials: string[];
            specialties: string[];
            subSpecialties: string[];
            yearsExperience: number | null;
            practiceName: string | null;
            practiceType: import(".prisma/client").$Enums.PracticeType;
            practiceAddress: string | null;
            practiceCity: string | null;
            practiceState: string | null;
            practiceZipCode: string | null;
            practicePhone: string | null;
            practiceEmail: string | null;
            practiceWebsite: string | null;
            medicalLicenseNumber: string | null;
            medicalLicenseState: string | null;
            medicalLicenseExpiry: Date | null;
            deaNumber: string | null;
            boardCertifications: string[];
            professionalBio: string | null;
            education: string | null;
            awards: string[];
            publications: string[];
            languages: string[];
            isAcceptingNewPatients: boolean;
            consultationTypes: import(".prisma/client").$Enums.ConsultationType[];
            currency: string;
        };
    }>;
}
