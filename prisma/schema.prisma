// Enterprise Healthcare Authentication Schema
// HIPAA Compliant - Healthcare Information Management System
// This schema focuses ONLY on authentication and user management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===========================================
// CORE USER MANAGEMENT
// ===========================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String // Encrypted with bcrypt
  firstName String
  lastName  String
  role      UserRole @default(PATIENT)

  // Account Status
  isActive    Boolean   @default(true)
  isVerified  Boolean   @default(false)
  isLocked    Boolean   @default(false)
  lockedUntil DateTime?

  // Profile Information
  avatar      String?
  phoneNumber String?
  dateOfBirth DateTime?
  gender      Gender?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String    @default("US")

  // Professional Information (for healthcare providers)
  department     String?
  specialization String?
  licenseNumber  String?
  npiNumber      String? // National Provider Identifier

  // Security Settings
  lastLoginAt          DateTime?
  lastPasswordChange   DateTime  @default(now())
  passwordResetToken   String?
  passwordResetExpires DateTime?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile        UserProfile?
  sessions       UserSession[]
  mfaSettings    MfaSettings?
  mfaAttempts    MfaAttempt[]
  auditLogs      AuditLog[]
  permissions    UserPermission[]
  consentRecords ConsentRecord[]

  // Doctor-specific relations
  doctorProfile        DoctorProfile?
  doctorServices       DoctorService[]
  doctorInsurances     DoctorInsurance[]
  doctorSchedules      DoctorSchedule[]
  doctorAvailabilities DoctorAvailability[]
  doctorDaySlots       DoctorDaySlot[]
  consultationFees     ConsultationFee[]
  scheduleTemplates    DoctorScheduleTemplate[]
  appointments         Appointment[]             @relation("DoctorAppointments")
  patientAppointments  Appointment[]             @relation("PatientAppointments")
  scheduleExceptions   DoctorScheduleException[]

  // Patient-specific relations
  patientProfile PatientProfile?
  bookings       PatientBooking[]

  // EMR Relations
  patientVisits     PatientVisit[]
  prescriptions     Prescription[]
  labOrders         LabOrder[]
  imagingOrders     ImagingOrder[]
  clinicalTemplates ClinicalTemplate[]
  labResults        LabResult[]
  imagingResults    ImagingResult[]

  // Notification Relations
  notifications Notification[]

  @@map("users")
}

model UserProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Extended Profile Information
  bio         String?
  preferences Json? // User preferences as JSON
  timezone    String  @default("UTC")
  language    String  @default("en")

  // Healthcare Specific
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?
  allergies                String[]
  medications              String[]
  medicalConditions        String[]
  bloodType                String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_profiles")
}

// ===========================================
// AUTHENTICATION & SESSION MANAGEMENT
// ===========================================

model UserSession {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Session Details
  refreshToken String  @unique
  accessToken  String? // For tracking active sessions
  deviceInfo   Json? // Device fingerprint
  ipAddress    String?
  userAgent    String?

  // Session Status
  isActive     Boolean  @default(true)
  expiresAt    DateTime
  lastActivity DateTime @default(now())

  // Security
  isSecure Boolean @default(false) // HTTPS sessions
  location String? // Geographic location

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_sessions")
}

// ===========================================
// MULTI-FACTOR AUTHENTICATION
// ===========================================

model MfaSettings {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // MFA Configuration
  isEnabled   Boolean   @default(false)
  method      MfaMethod @default(TOTP)
  secret      String? // Encrypted TOTP secret
  backupCodes String[] // Encrypted backup codes

  // SMS/Email MFA
  phoneNumber   String?
  emailVerified Boolean @default(false)

  // Recovery
  recoveryCodes String[] // Encrypted recovery codes

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mfa_settings")
}

model MfaAttempt {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Attempt Details
  method    MfaMethod
  code      String
  isValid   Boolean
  ipAddress String?
  userAgent String?

  // Timestamps
  attemptedAt DateTime @default(now())

  @@map("mfa_attempts")
}

// ===========================================
// SECURITY EVENTS
// ===========================================

model SecurityEvent {
  id     String  @id @default(cuid())
  userId String?

  // Event Details
  type        SecurityEventType
  severity    SecuritySeverity
  description String

  // Context
  ipAddress String?
  userAgent String?
  metadata  Json?

  // Resolution
  isResolved Boolean   @default(false)
  resolvedAt DateTime?
  resolvedBy String?

  // Timestamps
  occurredAt DateTime @default(now())

  @@map("security_events")
}

// ===========================================
// AUDIT & COMPLIANCE
// ===========================================

model AuditLog {
  id     String  @id @default(cuid())
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Audit Details
  action     String // e.g., "LOGIN", "LOGOUT", "PASSWORD_CHANGE"
  resource   String? // e.g., "USER", "PATIENT"
  resourceId String? // ID of the affected resource

  // Request Details
  ipAddress String?
  userAgent String?
  method    String? // HTTP method
  endpoint  String? // API endpoint

  // Additional Data
  metadata Json? // Additional audit data
  severity AuditSeverity @default(INFO)

  // Timestamps
  timestamp DateTime @default(now())

  @@map("audit_logs")
}

// ===========================================
// CONSENT MANAGEMENT (HIPAA)
// ===========================================

model ConsentRecord {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Consent Details
  type        ConsentType
  description String
  granted     Boolean
  grantedAt   DateTime?
  revokedAt   DateTime?

  // Legal Requirements
  version   String // Consent form version
  ipAddress String?
  userAgent String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("consent_records")
}

// ===========================================
// ROLE-BASED ACCESS CONTROL
// ===========================================

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  description String
  resource    String // e.g., "patients", "appointments"
  action      String // e.g., "read", "write", "delete"

  // Relations
  userPermissions UserPermission[]
  rolePermissions RolePermission[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("permissions")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String
  isSystem    Boolean @default(false) // System roles cannot be deleted

  // Relations
  rolePermissions RolePermission[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  // Permission Scope
  resourceId String? // Specific resource ID (e.g., specific patient)
  conditions Json? // Additional conditions as JSON

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, permissionId, resourceId])
  @@map("user_permissions")
}

enum UserRole {
  DOCTOR
  NURSE
  PATIENT
  ADMIN
  TECHNICIAN
  RECEPTIONIST
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MfaMethod {
  TOTP // Time-based One-Time Password
  SMS // SMS-based
  EMAIL // Email-based
  BACKUP // Backup codes
}

enum AuditSeverity {
  DEBUG
  INFO
  WARN
  ERROR
  CRITICAL
}

enum ConsentType {
  DATA_PROCESSING
  MARKETING
  RESEARCH
  SHARING
  EMERGENCY_ACCESS
}

// ===========================================
// Scheduling models (merged from scheduling-schema.prisma)
// ===========================================

// Core Scheduling Models

model DoctorScheduleTemplate {
  id          String   @id @default(cuid())
  doctorId    String
  name        String   // e.g., "Standard Week", "Telemedicine Week"
  description String?
  isDefault   Boolean  @default(false)
  isActive    Boolean  @default(true)
  isPublished Boolean  @default(true)
  timezone    String?  // e.g. "Africa/Lagos" or "UTC" - template-specific timezone
  createdBy   String?  // user id who created the template (may differ from doctor)
  // Booking window / notice rules (minutes/days)
  minBookingNotice       Int? // minutes before slot when bookings are allowed (e.g., 60)
  maxAdvanceBookingDays  Int? // how many days in advance patients can book (e.g., 90)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  doctor      User     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  timeSlots   DoctorTimeSlot[]
  schedules   DoctorSchedule[]

  // Enhanced design fields (JSON, optional)
  location          Json?
  appointmentTypes  Json?   // [{ id, name, duration, color?, capacity? }]
  applicationRules  Json?   // { mode: 'one-time'|'recurring'|'date-range', startDate?, endDate?, priority?, rrule? }
  daysOfWeek        String[] @default([])
  breaks            Json?   // [{ startTime, endTime, label? }]

  @@unique([doctorId, isDefault])
  @@index([doctorId, isActive])
}


model DoctorTimeSlot {
  id          String   @id @default(cuid())
  templateId  String
  dayOfWeek   DayOfWeek
  startTime   String   // HH:MM format (e.g., "09:00")
  endTime     String   // HH:MM format (e.g., "17:00")
  slotDuration Int     @default(30) // minutes
  bufferTime  Int      @default(0) // minutes between slots (deprecated: prefer bufferBefore/After)
  bufferBefore Int     @default(0) // minutes before the slot reserved
  bufferAfter  Int     @default(0) // minutes after the slot reserved
  isAvailable Boolean  @default(true)
  maxBookings Int      @default(1) // appointments per slot
  allowOverlap Boolean @default(false) // permit overlapping bookings in this slot (for group sessions)
  location    String?  // "Main Office", "Telemedicine", "Hospital A"
  serviceType String?  // "Consultation", "Follow-up", "Emergency"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  template    DoctorScheduleTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  // bookings were removed: Appointment model does not reference DoctorTimeSlot directly
  exceptions  DoctorScheduleException[]
  daySlots    DoctorDaySlot[]

  @@index([templateId, dayOfWeek])
  @@index([startTime, endTime])
}

model DoctorSchedule {
  id          String   @id @default(cuid())
  doctorId    String
  templateId  String?
  date        DateTime @db.Date
  startTime   String   // HH:MM format
  endTime     String   // HH:MM format
  slotDuration Int     @default(30)
  bufferTime  Int      @default(0)
  // per-day timezone (falls back to template.timezone or doctor's timezone)
  timezone    String?
  isAvailable Boolean  @default(true)
  maxBookings Int      @default(1)
  currentBookings Int  @default(0)
  location    String?
  serviceType String?
  notes       String?  // "Conference day", "Half day"
  meta        Json?    // free-form metadata about how this schedule was generated/applied
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  doctor      User     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  template    DoctorScheduleTemplate? @relation(fields: [templateId], references: [id])
  profileId   String?
  profile     DoctorProfile? @relation(fields: [profileId], references: [id])
  dayOfWeek   DayOfWeek?
  daySlots    DoctorDaySlot[]
  bookings    Appointment[]
  exceptions  DoctorScheduleException[]

  @@unique([doctorId, date, startTime])
  @@index([doctorId, date])
  @@index([date, isAvailable])
}

// Persisted per-date, per-slot availability rows
model DoctorDaySlot {
  id          String   @id @default(cuid())
  doctorId    String
  scheduleId  String?
  timeSlotId  String?  // optional link back to the template time slot that generated this day slot
  date        DateTime @db.Date
  startTime   String   // HH:MM
  endTime     String   // HH:MM
  isAvailable Boolean  @default(true)
  isBooked    Boolean  @default(false)
  slotCapacity Int     @default(1)
  currentBookings Int  @default(0)
  slotMetadata Json?
  timezone    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  doctor      User     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  schedule    DoctorSchedule? @relation(fields: [scheduleId], references: [id], onDelete: SetNull)
  timeSlot    DoctorTimeSlot?  @relation(fields: [timeSlotId], references: [id], onDelete: SetNull)

  @@unique([doctorId, date, startTime])
  @@index([doctorId, date])
}

model DoctorScheduleException {
  id          String   @id @default(cuid())
  doctorId    String
  scheduleId  String?
  timeSlotId  String?
  date        DateTime @db.Date
  startTime   String?  // HH:MM format
  endTime     String?  // HH:MM format
  type        ExceptionType
  reason      String?  // "Sick leave", "Conference", "Personal"
  isAllDay    Boolean  @default(false)
  isRecurring Boolean  @default(false)
  recurringPattern String? // "weekly", "monthly", "yearly"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  doctor      User     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  schedule    DoctorSchedule? @relation(fields: [scheduleId], references: [id])
  timeSlot    DoctorTimeSlot? @relation(fields: [timeSlotId], references: [id])

  @@index([doctorId, date])
  @@index([date, type])
}


enum SecurityEventType {
  LOGIN_FAILURE
  PASSWORD_BREACH
  SUSPICIOUS_ACTIVITY
  UNAUTHORIZED_ACCESS
  DATA_EXPORT
  ACCOUNT_LOCKOUT
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// ===========================================
// DOCTOR PROFILE SYSTEM
// ===========================================

// Professional Details
model DoctorProfile {
  id       String @id @default(cuid())
  doctorId String @unique
  doctor   User   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  // Professional Information
  title           String? // Dr., Prof., etc.
  credentials     String[] // MD, PhD, etc.
  specialties     String[] // Cardiology, Neurology, etc.
  subSpecialties  String[] // Interventional Cardiology, etc.
  yearsExperience Int?

  // Practice Information
  practiceName    String?
  practiceType    PracticeType @default(PRIVATE)
  practiceAddress String?
  practiceCity    String?
  practiceState   String?
  practiceZipCode String?
  practicePhone   String?
  practiceEmail   String?
  practiceWebsite String?

  // Professional Credentials
  medicalLicenseNumber String?
  medicalLicenseState  String?
  medicalLicenseExpiry DateTime?
  deaNumber            String?
  npiNumber            String?
  boardCertifications  String[]

  // Professional Bio
  professionalBio String?
  education       String? // Medical school, residency, fellowship
  awards          String[]
  publications    String[]
  languages       String[] @default(["English"])

  // Availability
  isAcceptingNewPatients Boolean            @default(true)
  consultationTypes      ConsultationType[]

  // Billing Preferences
  currency String @default("KES") // KES, USD, EUR, GBP

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  services         DoctorService[]
  insurances       DoctorInsurance[]
  schedules        DoctorSchedule[]
  consultationFees ConsultationFee[]

  @@map("doctor_profiles")
}

// Services Offered
model DoctorService {
  id        String        @id @default(cuid())
  doctorId  String
  doctor    User          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  profileId String
  profile   DoctorProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Service Details
  name        String
  description String?
  category    ServiceCategory
  duration    Int // Duration in minutes
  price       Decimal? // Optional price override

  // Service Status
  isActive   Boolean @default(true)
  isVirtual  Boolean @default(false)
  isInPerson Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("doctor_services")
}

// Accepted Insurance
model DoctorInsurance {
  id        String        @id @default(cuid())
  doctorId  String
  doctor    User          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  profileId String
  profile   DoctorProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Insurance Details
  insuranceName    String
  insuranceType    InsuranceType
  planName         String?
  isActive         Boolean       @default(true)
  copayAmount      Decimal?
  deductibleAmount Decimal?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("doctor_insurances")
}

// Consultation Fees
model ConsultationFee {
  id        String        @id @default(cuid())
  doctorId  String
  doctor    User          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  profileId String
  profile   DoctorProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  // Fee Structure
  consultationType ConsultationType
  baseFee          Decimal
  followUpFee      Decimal?
  cancellationFee  Decimal?
  noShowFee        Decimal?

  // Fee Status
  isActive Boolean @default(true)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("consultation_fees")
}

// Doctor Schedule
// (Older DoctorSchedule model removed - consolidated into the enhanced scheduling models above.)

// Doctor Availability Override (for specific dates)
model DoctorAvailability {
  id       String @id @default(cuid())
  doctorId String
  doctor   User   @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  // Override Details
  date        DateTime
  startTime   String // HH:MM format
  endTime     String // HH:MM format
  isAvailable Boolean
  reason      String? // Vacation, conference, etc.

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("doctor_availabilities")
}

// ===========================================
// ADDITIONAL ENUMS
// ===========================================

enum PracticeType {
  PRIVATE
  GROUP
  HOSPITAL
  CLINIC
  ACADEMIC
  TELEMEDICINE
}

enum ServiceCategory {
  CONSULTATION
  FOLLOW_UP
  PROCEDURE
  DIAGNOSTIC
  THERAPEUTIC
  PREVENTIVE
  EMERGENCY
  SPECIALIST_REFERRAL
}

enum ConsultationType {
  INITIAL_CONSULTATION
  FOLLOW_UP
  TELEMEDICINE
  IN_PERSON
  URGENT
  ROUTINE
}

enum InsuranceType {
  PRIVATE
  MEDICARE
  MEDICAID
  WORKERS_COMPENSATION
  SELF_PAY
  OTHER
}


// ===========================================
// PATIENT-SPECIFIC MODELS
// ===========================================

model PatientBooking {
  id        String @id @default(cuid())
  patientId String
  patient   User   @relation(fields: [patientId], references: [id], onDelete: Cascade)

  // Booking Details
  doctorId      String
  appointmentId String?
  date          DateTime
  time          String // HH:MM format
  serviceType   String

  // Booking Status
  status BookingStatus @default(PENDING)

  // Booking Information
  reasonForVisit String?
  notes          String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([patientId, date])
  @@index([status, date])
  @@map("patient_bookings")
}

enum BookingStatus {
  PENDING // Awaiting doctor confirmation
  CONFIRMED // Doctor confirmed
  REJECTED // Doctor rejected
  CANCELLED // Patient or doctor cancelled
  COMPLETED // Appointment completed
}

model Appointment {
  id         String          @id @default(cuid())
  doctorId   String
  doctor     User            @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: Cascade)
  patientId  String
  patient    User            @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  scheduleId String?
  schedule   DoctorSchedule? @relation(fields: [scheduleId], references: [id])

  // Appointment Details
  appointmentDate DateTime
  startTime       String // HH:MM format
  endTime         String // HH:MM format
  duration        Int // minutes
  type            AppointmentType
  status          AppointmentStatus @default(PENDING)

  // Location & Service
  location    String?
  serviceType String?
  serviceId   String? // Reference to doctor service

  // Medical Information
  symptoms     String?
  diagnosis    String?
  prescription String?
  notes        String?

  // Patient Booking Information
  reasonForVisit String? // Patient's reason for booking
  insuranceId    String? // Patient's insurance
  paymentStatus  PaymentStatus @default(PENDING)

  // Booking Workflow
  bookingRequestedAt DateTime  @default(now())
  confirmedAt        DateTime?
  cancelledAt        DateTime?
  cancelledBy        String? // DOCTOR | PATIENT
  cancellationReason String?

  // Confirmation & Reminders
  requiresConfirmation Boolean @default(false)
  confirmationSent     Boolean @default(false)

  // Follow-up
  followUpDate        DateTime?
  isRecurring         Boolean       @default(false)
  recurringPattern    String?
  parentAppointmentId String? // For recurring appointments
  parentAppointment   Appointment?  @relation("RecurringAppointments", fields: [parentAppointmentId], references: [id])
  childAppointments   Appointment[] @relation("RecurringAppointments")

  // Relations
  reminders AppointmentReminder[]
  visits    PatientVisit[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([doctorId, appointmentDate, startTime])
  @@index([doctorId, appointmentDate])
  @@index([patientId, appointmentDate])
  @@index([status, appointmentDate])
  @@map("appointments")
}

model AppointmentReminder {
  id            String      @id @default(cuid())
  appointmentId String
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  // Reminder Details
  type         ReminderType
  method       ReminderMethod
  scheduledFor DateTime
  message      String
  status       ReminderStatus @default(PENDING)

  // Delivery Details
  sentAt        DateTime?
  deliveredAt   DateTime?
  failureReason String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointment_reminders")
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ExceptionType {
  HOLIDAY
  VACATION
  SICK_LEAVE
  CONFERENCE
  PERSONAL
  EMERGENCY
  BLOCKED
  OTHER
}

enum AppointmentType {
  CONSULTATION
  FOLLOW_UP
  PROCEDURE
  DIAGNOSTIC
  THERAPEUTIC
  PREVENTIVE
  EMERGENCY
  TELEMEDICINE
}

enum AppointmentStatus {
  PENDING // Patient requested, awaiting doctor confirmation
  CONFIRMED // Doctor confirmed the appointment
  CANCELLED // Appointment was cancelled
  COMPLETED // Appointment finished successfully
  NO_SHOW // Patient didn't show up
  RESCHEDULED // Appointment moved to different time
  REJECTED // Doctor rejected the booking request
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  REFUNDED
  WAIVED
}

enum ReminderType {
  APPOINTMENT_REMINDER
  FOLLOW_UP_REMINDER
  PAYMENT_REMINDER
  PRESCRIPTION_REMINDER
}

enum ReminderMethod {
  PUSH_NOTIFICATION
  EMAIL
  SMS
  PHONE_CALL
}

enum ReminderStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
}

// ===========================================
// ELECTRONIC MEDICAL RECORDS (EMR) SYSTEM
// ===========================================

// Patient Medical Profile
model PatientProfile {
  id        String @id @default(cuid())
  patientId String @unique
  patient   User   @relation(fields: [patientId], references: [id], onDelete: Cascade)

  // Demographics
  dateOfBirth      DateTime?
  gender           Gender?
  bloodType        BloodType?
  height           Float? // in cm
  weight           Float? // in kg
  emergencyContact String?
  emergencyPhone   String?

  // Medical History
  medicalHistory  String[] // Array of conditions
  surgicalHistory String[] // Array of surgeries
  familyHistory   String[] // Array of family conditions
  socialHistory   String? // Smoking, alcohol, etc.

  // Allergies & Medications
  allergies          PatientAllergy[]
  currentMedications PatientMedication[]

  // Insurance & Billing
  primaryInsurance String?
  insuranceNumber  String?
  insuranceExpiry  DateTime?

  // Preferences
  preferredLanguage String                  @default("English")
  communicationPref CommunicationPreference @default(EMAIL)

  // Relations
  visits         PatientVisit[]
  labResults     LabResult[]
  imagingResults ImagingResult[]
  prescriptions  Prescription[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patient_profiles")
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

enum CommunicationPreference {
  EMAIL
  SMS
  PHONE
  PUSH_NOTIFICATION
}

// Patient Allergies
model PatientAllergy {
  id        String         @id @default(cuid())
  patientId String
  patient   PatientProfile @relation(fields: [patientId], references: [id], onDelete: Cascade)

  allergen    String
  severity    AllergySeverity
  reaction    String
  notes       String?
  diagnosedAt DateTime?
  diagnosedBy String? // Doctor ID

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patient_allergies")
}

enum AllergySeverity {
  MILD
  MODERATE
  SEVERE
  LIFE_THREATENING
}

// Current Medications
model PatientMedication {
  id        String         @id @default(cuid())
  patientId String
  patient   PatientProfile @relation(fields: [patientId], references: [id], onDelete: Cascade)

  medicationName String
  dosage         String
  frequency      String
  route          String? // oral, IV, etc.
  startDate      DateTime
  endDate        DateTime?
  prescribedBy   String? // Doctor ID
  pharmacy       String?
  notes          String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patient_medications")
}

// Patient Visits (SOAP Notes)
model PatientVisit {
  id            String         @id @default(cuid())
  patientId     String
  patient       PatientProfile @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId      String
  doctor        User           @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  appointmentId String?
  appointment   Appointment?   @relation(fields: [appointmentId], references: [id])

  // Visit Details
  visitDate      DateTime  @default(now())
  visitType      VisitType @default(CONSULTATION)
  chiefComplaint String

  // SOAP Notes
  subjective String? // Patient's description
  objective  String? // Doctor's observations
  assessment String? // Diagnosis/assessment
  plan       String? // Treatment plan

  // Voice-to-Text
  voiceNotes   String? // Transcribed voice notes
  voiceFileUrl String? // Link to voice recording

  // ICD-10 Codes
  diagnoses VisitDiagnosis[]

  // Follow-up
  followUpRequired Boolean   @default(false)
  followUpDate     DateTime?
  followUpNotes    String?

  // Relations
  prescriptions Prescription[]
  labOrders     LabOrder[]
  imagingOrders ImagingOrder[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("patient_visits")
}

enum VisitType {
  CONSULTATION
  FOLLOW_UP
  EMERGENCY
  PREVENTIVE
  SPECIALIST_REFERRAL
}

// Visit Diagnoses (ICD-10)
model VisitDiagnosis {
  id      String       @id @default(cuid())
  visitId String
  visit   PatientVisit @relation(fields: [visitId], references: [id], onDelete: Cascade)

  icd10Code     String
  diagnosisName String
  isPrimary     Boolean @default(false)
  notes         String?

  // Timestamps
  createdAt DateTime @default(now())

  @@map("visit_diagnoses")
}

// Prescription Management
model Prescription {
  id        String         @id @default(cuid())
  patientId String
  patient   PatientProfile @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId  String
  doctor    User           @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  visitId   String?
  visit     PatientVisit?  @relation(fields: [visitId], references: [id])

  // Prescription Details
  medicationName String
  genericName    String?
  dosage         String
  frequency      String
  duration       String
  quantity       Int
  refills        Int     @default(0)
  instructions   String?

  // Drug Information
  drugInteractions  String[] // Array of interaction warnings
  contraindications String[] // Array of contraindications

  // Pharmacy & Delivery
  pharmacyName    String?
  pharmacyAddress String?
  pharmacyPhone   String?
  deliveryMethod  DeliveryMethod @default(PICKUP)

  // Status
  status       PrescriptionStatus @default(PENDING)
  prescribedAt DateTime           @default(now())
  filledAt     DateTime?
  pickedUpAt   DateTime?

  // Digital Prescription
  qrCode           String? // QR code for verification
  digitalSignature String? // Doctor's digital signature

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("prescriptions")
}

enum DeliveryMethod {
  PICKUP
  DELIVERY
  MAIL
}

enum PrescriptionStatus {
  PENDING
  SENT_TO_PHARMACY
  FILLED
  PICKED_UP
  CANCELLED
  EXPIRED
}

// Lab Results Management
model LabResult {
  id        String         @id @default(cuid())
  patientId String
  patient   PatientProfile @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId  String?
  doctor    User?          @relation(fields: [doctorId], references: [id], onDelete: SetNull)
  orderId   String?
  order     LabOrder?      @relation(fields: [orderId], references: [id])

  // Lab Details
  testName       String
  testCategory   LabTestCategory
  resultValue    String
  resultUnit     String?
  referenceRange String?
  isAbnormal     Boolean         @default(false)
  criticalValue  Boolean         @default(false)

  // File Management
  reportFileUrl String? // PDF/image of lab report
  ocrText       String? // OCR extracted text

  // Lab Information
  labName        String
  labAddress     String?
  labPhone       String?
  technicianName String?

  // Dates
  collectedAt DateTime
  processedAt DateTime?
  reportedAt  DateTime  @default(now())

  // Status
  status     LabResultStatus @default(PENDING_REVIEW)
  reviewedAt DateTime?
  reviewedBy String? // Doctor ID

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lab_results")
}

enum LabTestCategory {
  BLOOD_CHEMISTRY
  HEMATOLOGY
  MICROBIOLOGY
  IMMUNOLOGY
  ENDOCRINOLOGY
  CARDIOLOGY
  ONCOLOGY
  PATHOLOGY
  OTHER
}

enum LabResultStatus {
  PENDING_REVIEW
  REVIEWED
  FLAGGED_FOR_FOLLOWUP
  CRITICAL_ALERT_SENT
}

// Lab Orders
model LabOrder {
  id        String        @id @default(cuid())
  patientId String
  doctorId  String
  doctor    User          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  visitId   String?
  visit     PatientVisit? @relation(fields: [visitId], references: [id])

  // Order Details
  testsRequested String[] // Array of test names
  clinicalNotes  String?
  urgency        OrderUrgency @default(ROUTINE)

  // Lab Information
  labName    String?
  labAddress String?

  // Status
  status      LabOrderStatus @default(PENDING)
  orderedAt   DateTime       @default(now())
  collectedAt DateTime?
  completedAt DateTime?

  // Relations
  results LabResult[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lab_orders")
}

enum OrderUrgency {
  STAT
  URGENT
  ROUTINE
  SCHEDULED
}

enum LabOrderStatus {
  PENDING
  SENT_TO_LAB
  COLLECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Imaging Results Management
model ImagingResult {
  id        String         @id @default(cuid())
  patientId String
  patient   PatientProfile @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctorId  String?
  doctor    User?          @relation(fields: [doctorId], references: [id], onDelete: SetNull)
  orderId   String?
  order     ImagingOrder?  @relation(fields: [orderId], references: [id])

  // Imaging Details
  studyType    ImagingStudyType
  bodyPart     String
  technique    String?
  contrastUsed Boolean          @default(false)

  // Results
  findings        String?
  impression      String?
  recommendations String?

  // File Management
  imageUrls     String[] // Array of image URLs
  reportFileUrl String? // PDF of radiology report
  ocrText       String? // OCR extracted text

  // Radiologist Information
  radiologistName String?
  radiologistId   String?

  // Dates
  performedAt DateTime
  reportedAt  DateTime @default(now())

  // Status
  status     ImagingResultStatus @default(PENDING_REVIEW)
  reviewedAt DateTime?
  reviewedBy String? // Doctor ID

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("imaging_results")
}

enum ImagingStudyType {
  X_RAY
  CT_SCAN
  MRI
  ULTRASOUND
  MAMMOGRAPHY
  NUCLEAR_MEDICINE
  PET_SCAN
  OTHER
}

enum ImagingResultStatus {
  PENDING_REVIEW
  REVIEWED
  FLAGGED_FOR_FOLLOWUP
  CRITICAL_FINDING_ALERT
}

// Imaging Orders
model ImagingOrder {
  id        String        @id @default(cuid())
  patientId String
  doctorId  String
  doctor    User          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  visitId   String?
  visit     PatientVisit? @relation(fields: [visitId], references: [id])

  // Order Details
  studyType       ImagingStudyType
  bodyPart        String
  clinicalHistory String?
  urgency         OrderUrgency     @default(ROUTINE)

  // Imaging Center
  imagingCenter String?
  centerAddress String?

  // Status
  status      ImagingOrderStatus @default(PENDING)
  orderedAt   DateTime           @default(now())
  scheduledAt DateTime?
  performedAt DateTime?
  completedAt DateTime?

  // Relations
  results ImagingResult[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("imaging_orders")
}

enum ImagingOrderStatus {
  PENDING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Clinical Templates (SOAP, etc.)
model ClinicalTemplate {
  id       String  @id @default(cuid())
  doctorId String?
  doctor   User?   @relation(fields: [doctorId], references: [id], onDelete: SetNull)

  // Template Details
  name      String
  category  TemplateCategory
  specialty String?
  isPublic  Boolean          @default(false)

  // Template Content
  subjectiveTemplate String?
  objectiveTemplate  String?
  assessmentTemplate String?
  planTemplate       String?

  // Usage
  usageCount Int @default(0)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("clinical_templates")
}

enum TemplateCategory {
  SOAP_NOTE
  CONSULTATION
  FOLLOW_UP
  EMERGENCY
  PREVENTIVE
  SPECIALIST
  PROCEDURE
}

// Drug Database (for interactions)
model Drug {
  id String @id @default(cuid())

  // Drug Information
  name        String   @unique
  genericName String?
  brandNames  String[]
  drugClass   String?
  mechanism   String?

  // Dosage Information
  standardDosage    String?
  maxDosage         String?
  contraindications String[]

  // Interactions
  interactions     DrugInteraction[]
  drugInteractions DrugInteraction[] @relation("DrugInteractions")

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("drugs")
}

// Drug Interactions
model DrugInteraction {
  id     String @id @default(cuid())
  drugId String
  drug   Drug   @relation(fields: [drugId], references: [id], onDelete: Cascade)

  interactingDrugId String
  interactingDrug   Drug   @relation("DrugInteractions", fields: [interactingDrugId], references: [id], onDelete: Cascade)

  severity       InteractionSeverity
  description    String
  clinicalEffect String?
  management     String?

  // Timestamps
  createdAt DateTime @default(now())

  @@unique([drugId, interactingDrugId])
  @@map("drug_interactions")
}

enum InteractionSeverity {
  MINOR
  MODERATE
  MAJOR
  CONTRAINDICATED
}

// ===========================================
// NOTIFICATION SYSTEM
// ===========================================

model Notification {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Notification Details
  type    NotificationType
  title   String
  message String
  body    String? // Optional detailed body

  // Notification Status
  isRead     Boolean   @default(false)
  readAt     DateTime?
  isArchived Boolean   @default(false)
  archivedAt DateTime?

  // Priority & Urgency
  priority NotificationPriority @default(NORMAL)

  // Action & Navigation
  actionUrl   String? // Deep link or route
  actionLabel String? // e.g., "View Appointment", "Accept Request"
  metadata    Json? // Additional acción data (appointmentId, doctorId, etc.)

  // Delivery Channels
  channels NotificationChannel[]

  // Related Entity (polymorphic)
  relatedEntityType String? // e.g., "APPOINTMENT", "BOOKING", "PRESCRIPTION"
  relatedEntityId   String? // ID of the related entity

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, isRead, createdAt])
  @@index([userId, type, createdAt])
  @@index([relatedEntityType, relatedEntityId])
  @@map("notifications")
}

enum NotificationType {
  // Appointment-related
  APPOINTMENT_REQUESTED // Patient requested appointment, notify doctor
  APPOINTMENT_SCHEDULED // Doctor scheduled, notify patient
  APPOINTMENT_CONFIRMED // Doctor confirmed, notify patient
  APPOINTMENT_CANCELLED // Appointment cancelled, notify both
  APPOINTMENT_REMINDER // Upcoming appointment reminder
  APPOINTMENT_RESCHEDULED // Appointment rescheduled, notify both

  // System & General
  SYSTEM_ALERT
  SYSTEM_MAINTENANCE
  WELCOME
  PROFILE_UPDATE

  // Medical Records
  PRESCRIPTION_READY
  LAB_RESULT_AVAILABLE
  IMAGING_RESULT_AVAILABLE

  // Communication
  MESSAGE_RECEIVED
  FILE_SHARED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationChannel {
  IN_APP // In-app notification
  PUSH // Push notification (mobile)
  EMAIL // Email notification
  SMS // SMS notification
}
